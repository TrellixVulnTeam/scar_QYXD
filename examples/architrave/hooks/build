#!/bin/bash
# hooks/build
# https://docs.docker.com/docker-cloud/builds/advanced/

## $IMAGE_NAME var is injected into the build so the tag is correct.
echo "[***] Build hook starting..."

# $(echo "index.docker.io/user/respository" | cut -d '/' -f 3) = "repository"
APPLICATION=$(echo "${DOCKER_REPO}" | cut -d '/' -f 3)

echo "[---] DOCKERFILE_PATH: ${DOCKERFILE_PATH}"
echo "[---] DOCKER_REPO: ${DOCKER_REPO}"
echo "[---] IMAGE_NAME: ${IMAGE_NAME}"
echo "[---] APPLICATION: ${APPLICATION}"

# $(echo "index.docker.io/user/repository" | cut -d '/' -f 2-3) = "user/repository"
# otherwise, you will need to set ENVIRONMENT VARIABLES for your build.
if [ -z $GITHUB_USERREPO ]; then
    GITHUB_USERREPO=$(echo "${DOCKER_REPO}" | cut -d '/' -f 2-3)
fi

# Set description from github
DESCRIPTION=$(curl -s https://api.github.com/repos/${GITHUB_USERREPO} \
    | grep '"description".*' \
    | head -n 1 \
    | cut -d '"' -f 4)

echo "[---] GITHUB_USERREPO: ${GITHUB_USERREPO}"
echo "[---] DESCRIPTION: ${DESCRIPTION}"



## Build the prime image at the end.
docker build \
    --network=host \
    --file Dockerfile \
    -t ${IMAGE_NAME} \
    .

## Push the default arch image so manifest-tool can find it
docker push ${IMAGE_NAME}

## Tag the default image so dockerhub can push it.
docker tag ${IMAGE_NAME} ${IMAGE_NAME}

echo "[***] ...build hook complete."
